the minimalist meshing tools

OVERALL STRUCTURE

The code is organized first as follows:

1) a "backend" full of tools written only
in pure C89, which do not include any
header files outside of xmesh.

2) several "frontends" for graphical programs,
namely three OS-specific implementations of
a GUI that displays a frame and senses
key presses and left clicks.

3) a place for the user-defined execution
code to go, namely something which
implements the functions in "back.h" for
GUI programs and a regular main() for
command line programs.
These user executions are kept in the
exe/ subdirectory.

4) two bridge modes between the front and
back ends. in "direct" mode, they are
both compiled together with the user
code into one program.
in "socket" mode, a standalone frontend
program listens on a socket for a
backend program that runs the user code.

5) interfaces to external libraries.
these are files that need to include
headers outside the project.
all such files are kept in the
ext/ subdirectory.
the frontends are part of this group,
since they use GUI libraries.

COPYRIGHT AND LICENSING INFORMATION

Read the LICENSE file.

DOCUMENTATION

Read the code.

BUILDING IT

This project uses a single makefile for its
build system, and in turn requires
only a "config.mk" file to define
its build configuration.
There are many examples of such configurations,
all "*.mk" files in here are such examples.
After creating your "config.mk" file,
just run `make`.
You also have the option of defining
CONFIG, in which case the configuration
file $(CONFIG).mk will be used.

First time users can try the config
files named after operating systems,
and run the "./test" program.
hold down 'z' to zoom and 'p' to pan.

AUTHORS

Dan Ibanez.

BUGS, FEATURE REQUESTS, PATCHES, COMMUNITY

Bug fixes and elegant improvements
to existing functionality are welcome.
Feature requests will be frowned upon.
I will pretend to be a community until
others join me.

CONTACT INFO

dan dot a dot ibanez at gmail dot com
